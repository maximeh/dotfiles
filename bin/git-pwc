#!/bin/bash
# (C) 2014, Yann E. MORIN <yann.morin.1998@free.fr>
# License: GPLv2, see: http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
set -e

PW_OLD=600 # only refresh if older than 10 minutes

#----------------------------------------------------------------------------

D_OK=0
D_CANCEL=1
D_HELP=2
D_EXTRA=3
D_ESC=255

OPT_STR=':hrmp:R:M:P:'

#----------------------------------------------------------------------------
main() {
    local OPT OPTARG OPTIND
    local gbranch gdir pwcache master_ok pw_prj
    local id _ subject ret tmpf date maxage age
    local -a ids subjects selected d_opts
    local has_git_config git_maxage git_master_ok git_pw_project

    # Handle -h early (before we even look for a git tree)
    # Also handle incorrect options now, while at it.
    unset OPTIND
    while getopts "${OPT_STR}" OPT; do
        case "${OPT}" in
        (h)     help; exit 0;;
        (:)     error "option '%s' expects a mandatory argument\n" "${OPTARG}";;
        (\?)    error "unknown option '%s'\n" "${OPTARG}";;
        esac
    done

    # Check we are in a git tree
    gdir="$( git rev-parse --git-dir 2>/dev/null || true )"
    if [ -z "${gdir}" ]; then
        error "not in a git directory\n"
    fi
    gdir="$( cd "${gdir}" >/dev/null 2>&1 && pwd )"
    pwcache="${gdir}/pwc.cache"

    # Get the default options
    maxage="$( git config --local --get --int pwc.maxage 2>/dev/null || true )"
    master_ok="$( git config --local --get --bool pwc.masterok 2>/dev/null || true )"
    pw_prj="$( git config --local --get pwc.project 2>/dev/null || true )"

    # Set options to default if not set in the git tree
    : ${maxage:=${PW_OLD}}
    : ${master_ok:=false}
    : ${pw_prj:=$( git config --file ~/.pwclientrc options.default 2>/dev/null || true )}

    unset OPTIND
    while getopts "${OPT_STR}" OPT; do
        case "${OPT}" in
        (r)     maxage=0;;
        (m)     master_ok="true";;
        (p)     pw_prj="${OPTARG}";;
        (R)     git_maxage="${OPTARG}"; has_git_config=1;;
        (M)     git_mastrer_ok="${OPTARG}"; has_git_config=1;;
        (P)     git_pw_project="${OPTARG}"; has_git_config=1;;
        # Note: we can't have -h here, it has been handled above.
        # Similarly, incorrect options have already been dealt with.
        esac
    done

    # Check if we do have git config to set
    if [ -n "${has_git_config}" ]; then
        if [ -n "${git_maxage}" ]; then
            printf "Setting maxage to %s\n" "${git_maxage}"
            git config --local --int pwc.maxage "${git_maxage}"
        fi
        if [ -n "${git_master_ok}" ]; then
            printf "Setting masterok to %s\n" "${git_master_ok}"
            git config --local --bool pwc.masterok "${git_master_ok}"
        fi
        if [ -n "${git_pw_project}" ]; then
            printf "Setting project to %s\n" "${git_pw_project}"
            git config --local pwc.project "${git_pw_project}"
        fi
        exit 0
    fi

    # Check the Patchwork project is known
    if [ -z "${pw_prj}" ]; then
        error "no Patchwork project set\n"
    fi

    # We do not want to work on master
    gbranch="$( git branch 2>/dev/null | sed -re '/^\* (.*)/!d; s//\1/;' )"
    if [ "${gbranch}" = "master" -a "${master_ok}" = "false" ]; then
        error "cannot work on master\n"
    fi

    # Check whether the cached data is too old
    date="$( date +%s )"
    if [ ! -f "${pwcache}" ]; then
        touch -d '1970-01-01 00:00:00 Z' "${pwcache}"
    fi
    age=$((date-$( stat -c '%Y' "${pwcache}" )))
    if [ ${age} -ge ${maxage} ]; then
        trace "Patchwork cache too cold, retrieving patch list for %s..." "${pw_prj}"
        pwclient list -p "${pw_prj}" -s New |tail -n +3 >"${pwcache}"
        printf " done\n"
    fi

    # Build the list of patches
    while read id _ subject; do
        ids+=( ${id} )
        subjects+=( [${id}]="${subject}" )
    done < <( tac "${pwcache}" )

    if [ ${#ids[@]} -eq 0 ]; then
        trace "no patch in list\n"
        exit 0
    fi

    # Prompt the user for the list of patches to apply
    tmpf="$( mktemp --tmpdir .XXXXXX )"
    d_opts=( --keep-tite --scrollbar --separate-output
             --no-mouse --output-fd 3
             --title " Patchwork for ${pw_prj} "
             --ok-label "Apply"
             --cancel-label "Quit"
             --checklist "Select patches to apply (${#ids[@]} total)"
             0 0 0
           )
    for id in ${ids[@]}; do
        d_opts+=( ${id} "${subjects[${id}]}" off )
    done
    exec 3>"${tmpf}"
    dialog "${d_opts[@]}" && ret=0 || ret=${?}
    exec 3>&-
    selected=( $( tac "${tmpf}" ) )
    rm -f "${tmpf}"
    case "${ret}" in #(
    ${D_CANCEL})    exit 0;; #(
    esac

    if [ ${#selected[@]} -eq 0 ]; then
        trace "no patch selected\n"
        exit 1
    fi

    for id in "${selected[@]}"; do
        if ! pwclient git-am "${id}"; then
            error "failed to apply patch #%s %s\n" "${id}" "${subject[${id}]}"
        fi
    done
}

#----------------------------------------------------------------------------
help() {
    cat <<-_EOF_
	GIT-PWC(1)                         Git Manual                           GIT-PWC(1)

	NAME
	        git-pwc - List and apply patches from patchwork

	SYNOPSIS
	        git pwc [-h] [-r] [-m] [-p PRJ] [-R AGE] [-M true|false] [-P PRJ]

	DESCRIPTION
	        git-pwc retrieves the list of pending patches from Patchwork, and presents
	        this list to the user, who can then choose one or more patches to apply or
	        view.

	        Retrieving the list of patches can take some time, so git-pwc maintains a
	        cache of the pending patches. When that cache is older than 10 minutes, it
	        is automatically refreshed.

	        By default, git-pwc will refuse to apply patches if the current branch is
	        master. You can override that with either the -m option for the current
	        invocation, or permanently for this git tree by calling git-pwc with only
	        the -M option.

	OPTIONS
	        -h
	            Shows this help text.

	        -r
	            Force a refresh of the local cache. If not specified, the cache is
	            refreshed if it is older than the age set with -R (or 10 minutes if
	            not set).

	        -m
	            Do not fail if the current branch is master.

	        -p PRJ
	            Get patch list from Patchwork project PRJ.

	        -R MAXAGE
	            Set the maximum age (in seconds) of the local cache before it is
	            refreshed.

	        -M true|false
	            Accept/do not accept to work on the master branch for the current git
	            tree.

	        -P PRJ
	            Set the Patchwork project for this git tree to PRJ, and exit. If a
	            Patchwork project has not been set for the current git tree, patches
	            will be fetched for the default Patchwork project, as configured in
	            ~/.pwclientrc .

	GIT
	        Not part of the git(1) suite
	_EOF_
}

#----------------------------------------------------------------------------
git_config() {
    local -a args

    args=( "${@}" )
}

#----------------------------------------------------------------------------
trace() { local fmt="${1}"; shift; printf "%s: " "${myname}"; printf "${fmt}" "${@}"; }
error() { trace "${@}" >&2; exit 1; }
debug() { :; }
if [ -n "${GIT_DEBUG}" ]; then
    debug() { trace "${@}" >&2; }
fi

#----------------------------------------------------------------------------
myname="${0##*/}"
mydir="${0%/*}"
main "$@"