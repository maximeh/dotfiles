#!/usr/bin/env bash

app_name="$(basename "${BASH_SOURCE[0]}")"

print_help() {
	expand -t 4 << EOF
Usage:
	$app_name
		Delete local branches that no longer exist on remote.

Options:
	-?, --help
		Show this help information and exit.
EOF
}

while [[ $# -gt 0 ]]; do
	case "$1" in
		-\?|--help)
			print_help
			exit 0
			;;
		-*)
			echo "$app_name: [Error] Unknown option: $1" >&2
			exit 1
			;;
		*)
			echo "$app_name: [Error] Unexpected argument: $1" >&2
			exit 1
			;;
	esac
done

git rev-parse --git-dir > /dev/null || exit $?

git fetch --all --prune &&

current_branch="$(git rev-parse --abbrev-ref HEAD)" &&
main_branch_full="$(git rev-parse --verify --quiet --abbrev-ref origin/HEAD --)"
main_branch=${main_branch_full#origin/}
worktree_status="$(git status --porcelain)"

for branch in $(git for-each-ref --format '%(refname) %(upstream:track)' refs/heads | awk '$2 == "[gone]" {sub("refs/heads/", "", $1); print $1}'); do
	if [[ $branch == "$current_branch" ]]; then
		if [[ $branch != "$main_branch" ]]; then
			if [[ -n "$worktree_status" ]]; then
				echo "$app_name: [Error] Cannot delete current branch: Working tree has changes." >&2
				exit 1
			fi
			git switch "$main_branch" &&
			git branch -D "$branch"
		else
			echo "$app_name: [Error] Cannot delete main branch '$main_branch'." >&2
		fi
	else
		git branch -D "$branch"
	fi
done
